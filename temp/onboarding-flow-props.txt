// Add these props to the OnboardingFlow function declaration
interface OnboardingFlowProps {
  isInvitation?: boolean;
  invitationOrgId?: string | null;
}

export function OnboardingFlow({ 
  isInvitation = false, 
  invitationOrgId = null 
}: OnboardingFlowProps) {
  // Existing code
  
  // Determine starting step based on invitation
  useEffect(() => {
    if (isInvitation && invitationOrgId) {
      // For invited users, we should be able to import the organization
      // and skip directly to profile setup
      const loadInvitedOrganization = async () => {
        try {
          setLoading(true);
          
          // First check if the user is already a member
          const { data: memberships, error: membershipError } = await supabase
            .from('organization_members')
            .select('organization_id')
            .eq('user_id', user?.id)
            .eq('organization_id', invitationOrgId)
            .maybeSingle();
            
          if (membershipError) {
            console.error('Error checking membership:', membershipError);
            return;
          }
          
          // If already a member, proceed normally
          if (memberships) {
            return;
          }
          
          // Get the organization data
          const { data: org, error } = await supabase
            .from('organizations')
            .select('*')
            .eq('id', invitationOrgId)
            .single();
            
          if (error) {
            console.error('Error loading invited organization:', error);
            return;
          }
          
          // Set the organization in state
          setOrganization(org);
          
          // Create the user's membership to this organization
          if (user) {
            const { error: insertError } = await supabase
              .from('organization_members')
              .insert({
                user_id: user.id,
                organization_id: invitationOrgId,
                role: 'member'
              });
              
            if (insertError) {
              console.error('Error creating membership:', insertError);
              return;
            }
          }
          
          // Set the current step to profile setup
          setCompletedSteps(['organization']);
          setCurrentStep('profile');
          
          // Save progress
          await saveProgress('profile', ['organization']);
        } catch (error) {
          console.error('Error in invitation flow:', error);
        } finally {
          setLoading(false);
        }
      };
      
      if (user) {
        loadInvitedOrganization();
      }
    }
  }, [user, isInvitation, invitationOrgId]);

  // Rest of the component remains the same
