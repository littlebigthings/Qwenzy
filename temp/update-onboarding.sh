#!/bin/bash

# Step 1: Update the OnboardingFlow component signature to accept props
sed -i '93s/export function OnboardingFlow() {/interface OnboardingFlowProps {\n  isInvitation?: boolean;\n  invitationOrgId?: string | null;\n}\n\nexport function OnboardingFlow({ \n  isInvitation = false, \n  invitationOrgId = null \n}: OnboardingFlowProps = {}) {/' client/src/components/onboarding-flow.tsx

# Step 2: Add the useEffect hook to handle invitation initialization
# (Finding a good insertion point after the existing useEffects)
sed -i '/useEffect(() => {/,/}, \[user\]);/!b;/}, \[user\]);/a\\n  // Handle invited user flow\n  useEffect(() => {\n    if (isInvitation && invitationOrgId && user) {\n      // For invited users, we should skip directly to profile setup\n      const loadInvitedOrganization = async () => {\n        try {\n          setLoading(true);\n          \n          // First check if the user is already a member\n          const { data: memberships, error: membershipError } = await supabase\n            .from(\"organization_members\")\n            .select(\"organization_id\")\n            .eq(\"user_id\", user.id)\n            .eq(\"organization_id\", invitationOrgId)\n            .maybeSingle();\n            \n          if (membershipError) {\n            console.error(\"Error checking membership:\", membershipError);\n            return;\n          }\n          \n          // If already a member, proceed normally\n          if (memberships) {\n            return;\n          }\n          \n          // Get the organization data\n          const { data: org, error } = await supabase\n            .from(\"organizations\")\n            .select(\"*\")\n            .eq(\"id\", invitationOrgId)\n            .single();\n            \n          if (error) {\n            console.error(\"Error loading invited organization:\", error);\n            return;\n          }\n          \n          // Set the organization in state\n          setOrganization(org);\n          \n          // Create the user\"s membership to this organization\n          const { error: insertError } = await supabase\n            .from(\"organization_members\")\n            .insert({\n              user_id: user.id,\n              organization_id: invitationOrgId,\n              role: \"member\"\n            });\n              \n          if (insertError) {\n            console.error(\"Error creating membership:\", insertError);\n            return;\n          }\n          \n          // Set the current step to profile setup\n          setCompletedSteps([\"organization\"]);\n          setCurrentStep(\"profile\");\n          \n          // Save progress\n          await saveProgress(\"profile\", [\"organization\"]);\n          \n          // Mark the invitation as accepted\n          if (user.email) {\n            await markInvitationAsAccepted(user.email, invitationOrgId);\n          }\n          \n        } catch (error) {\n          console.error(\"Error in invitation flow:\", error);\n        } finally {\n          setLoading(false);\n        }\n      };\n      \n      loadInvitedOrganization();\n    }\n  }, [user, isInvitation, invitationOrgId]);' client/src/components/onboarding-flow.tsx

chmod +x temp/update-onboarding.sh
./temp/update-onboarding.sh
